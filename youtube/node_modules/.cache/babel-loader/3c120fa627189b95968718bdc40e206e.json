{"ast":null,"code":"var _jsxFileName = \"/Users/moseung/Documents/GitHub/reactdreamcoding/youtube/src/app.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport styles from \"./app.module.css\";\nimport VideoList from \"./components/video_list/video_list\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  const [videos, setVideos] = useState([]);\n\n  const search = query => {\n    const requestOptions = {\n      method: \"GET\",\n      redirect: \"follow\"\n    };\n    fetch(`https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=${query}&type=video&key=AIzaSyCZhmvN-I3R8J0z_kGPqOpOI07eE4VQ_1w`, requestOptions).then(response => response.json()).then(result => result.items.map(item => ({ ...item,\n      id: item.id.videoId\n    }))) //popular 25개의 비디오에서는 id가 그대로 unique한 값을 가지고 있찌만 search로 25개의 비디오를 받아올떄는 id가 객체로 돼있고 그안에 unique한 값이 들어가 있기 떄문에 한번더 분류해준거 원래의 item을 받아서 id값만 id안에있는 videoId로 주겠다.\n    .then(items => setVideos(items)).catch(error => console.log(\"error\", error));\n  };\n\n  useEffect(() => {\n    const requestOptions = {\n      method: \"GET\",\n      redirect: \"follow\"\n    };\n    fetch(\"https://youtube.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&key=AIzaSyCZhmvN-I3R8J0z_kGPqOpOI07eE4VQ_1w\", requestOptions).then(response => response.json()) //text를 json으로\n    .then(result => setVideos(result.items)).catch(error => console.log(\"error\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.appWrapper,\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearch: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoList, {\n      search: search,\n      videos: videos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Search","styles","VideoList","App","props","videos","setVideos","search","query","requestOptions","method","redirect","fetch","then","response","json","result","items","map","item","id","videoId","catch","error","console","log","appWrapper"],"sources":["/Users/moseung/Documents/GitHub/reactdreamcoding/youtube/src/app.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport styles from \"./app.module.css\";\nimport VideoList from \"./components/video_list/video_list\";\n\nconst App = (props) => {\n  const [videos, setVideos] = useState([]);\n\n  const search = (query) => {\n    const requestOptions = {\n      method: \"GET\",\n      redirect: \"follow\",\n    };\n    fetch(\n      `https://youtube.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q=${query}&type=video&key=AIzaSyCZhmvN-I3R8J0z_kGPqOpOI07eE4VQ_1w`,\n      requestOptions\n    )\n      .then((response) => response.json())\n      .then((result) =>\n        result.items.map((item) => ({ ...item, id: item.id.videoId }))\n      ) //popular 25개의 비디오에서는 id가 그대로 unique한 값을 가지고 있찌만 search로 25개의 비디오를 받아올떄는 id가 객체로 돼있고 그안에 unique한 값이 들어가 있기 떄문에 한번더 분류해준거 원래의 item을 받아서 id값만 id안에있는 videoId로 주겠다.\n      .then((items) => setVideos(items))\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  useEffect(() => {\n    const requestOptions = {\n      method: \"GET\",\n      redirect: \"follow\",\n    };\n\n    fetch(\n      \"https://youtube.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=25&key=AIzaSyCZhmvN-I3R8J0z_kGPqOpOI07eE4VQ_1w\",\n      requestOptions\n    )\n      .then((response) => response.json()) //text를 json으로\n      .then((result) => setVideos(result.items))\n      .catch((error) => console.log(\"error\", error));\n  }, []);\n\n  return (\n    <div className={styles.appWrapper}>\n      <Search onSearch={search}></Search>\n      <VideoList search={search} videos={videos} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;EAAA;;EACrB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;;EAEA,MAAMQ,MAAM,GAAIC,KAAD,IAAW;IACxB,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,KADa;MAErBC,QAAQ,EAAE;IAFW,CAAvB;IAIAC,KAAK,CACF,iFAAgFJ,KAAM,yDADpF,EAEHC,cAFG,CAAL,CAIGI,IAJH,CAISC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJtB,EAKGF,IALH,CAKSG,MAAD,IACJA,MAAM,CAACC,KAAP,CAAaC,GAAb,CAAkBC,IAAD,KAAW,EAAE,GAAGA,IAAL;MAAWC,EAAE,EAAED,IAAI,CAACC,EAAL,CAAQC;IAAvB,CAAX,CAAjB,CANJ,EAOI;IAPJ,CAQGR,IARH,CAQSI,KAAD,IAAWX,SAAS,CAACW,KAAD,CAR5B,EASGK,KATH,CASUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CATpB;EAUD,CAfD;;EAiBAzB,SAAS,CAAC,MAAM;IACd,MAAMW,cAAc,GAAG;MACrBC,MAAM,EAAE,KADa;MAErBC,QAAQ,EAAE;IAFW,CAAvB;IAKAC,KAAK,CACH,2IADG,EAEHH,cAFG,CAAL,CAIGI,IAJH,CAISC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAJtB,EAIuC;IAJvC,CAKGF,IALH,CAKSG,MAAD,IAAYV,SAAS,CAACU,MAAM,CAACC,KAAR,CAL7B,EAMGK,KANH,CAMUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB,CANpB;EAOD,CAbQ,EAaN,EAbM,CAAT;EAeA,oBACE;IAAK,SAAS,EAAEtB,MAAM,CAACyB,UAAvB;IAAA,wBACE,QAAC,MAAD;MAAQ,QAAQ,EAAEnB;IAAlB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAW,MAAM,EAAEA,MAAnB;MAA2B,MAAM,EAAEF;IAAnC;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAzCD;;GAAMF,G;;KAAAA,G;AA2CN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}